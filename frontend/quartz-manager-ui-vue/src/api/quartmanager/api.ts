/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetHttpJobResponse
 */
export interface GetHttpJobResponse {
    /**
     * 
     * @type {string}
     * @memberof GetHttpJobResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetHttpJobResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof GetHttpJobResponse
     */
    'cronExpression': string;
    /**
     * 
     * @type {string}
     * @memberof GetHttpJobResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GetJobGroupResponse
 */
export interface GetJobGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof GetJobGroupResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostHttpJobRequest
 */
export interface PostHttpJobRequest {
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'jobGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'httpMethod': PostHttpJobRequestHttpMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof PostHttpJobRequest
     */
    'cronExpression': string;
}

export const PostHttpJobRequestHttpMethodEnum = {
    Get: 'GET',
    Head: 'HEAD',
    Post: 'POST',
    Put: 'PUT',
    Patch: 'PATCH',
    Delete: 'DELETE',
    Options: 'OPTIONS',
    Trace: 'TRACE'
} as const;

export type PostHttpJobRequestHttpMethodEnum = typeof PostHttpJobRequestHttpMethodEnum[keyof typeof PostHttpJobRequestHttpMethodEnum];


/**
 * HttpSchedulerControllerApi - axios parameter creator
 * @export
 */
export const HttpSchedulerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PostHttpJobRequest} postHttpJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJob: async (postHttpJobRequest: PostHttpJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postHttpJobRequest' is not null or undefined
            assertParamExists('addJob', 'postHttpJobRequest', postHttpJobRequest)
            const localVarPath = `/scheduler/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postHttpJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob: async (groupName: string, jobName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupName' is not null or undefined
            assertParamExists('deleteJob', 'groupName', groupName)
            // verify required parameter 'jobName' is not null or undefined
            assertParamExists('deleteJob', 'jobName', jobName)
            const localVarPath = `/scheduler/groups/{groupName}/jobs/{jobName}`
                .replace(`{${"groupName"}}`, encodeURIComponent(String(groupName)))
                .replace(`{${"jobName"}}`, encodeURIComponent(String(jobName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scheduler/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (groupName: string, jobName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupName' is not null or undefined
            assertParamExists('getJob', 'groupName', groupName)
            // verify required parameter 'jobName' is not null or undefined
            assertParamExists('getJob', 'jobName', jobName)
            const localVarPath = `/scheduler/groups/{groupName}/jobs/{jobName}`
                .replace(`{${"groupName"}}`, encodeURIComponent(String(groupName)))
                .replace(`{${"jobName"}}`, encodeURIComponent(String(jobName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs: async (groupName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupName' is not null or undefined
            assertParamExists('getJobs', 'groupName', groupName)
            const localVarPath = `/scheduler/groups/{groupName}/jobs`
                .replace(`{${"groupName"}}`, encodeURIComponent(String(groupName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HttpSchedulerControllerApi - functional programming interface
 * @export
 */
export const HttpSchedulerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HttpSchedulerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PostHttpJobRequest} postHttpJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJob(postHttpJobRequest: PostHttpJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHttpJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addJob(postHttpJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJob(groupName: string, jobName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJob(groupName, jobName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetJobGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(groupName: string, jobName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHttpJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJob(groupName, jobName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} groupName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobs(groupName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHttpJobResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobs(groupName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HttpSchedulerControllerApi - factory interface
 * @export
 */
export const HttpSchedulerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HttpSchedulerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PostHttpJobRequest} postHttpJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJob(postHttpJobRequest: PostHttpJobRequest, options?: any): AxiosPromise<GetHttpJobResponse> {
            return localVarFp.addJob(postHttpJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob(groupName: string, jobName: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteJob(groupName, jobName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(options?: any): AxiosPromise<Array<GetJobGroupResponse>> {
            return localVarFp.getGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupName 
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(groupName: string, jobName: string, options?: any): AxiosPromise<GetHttpJobResponse> {
            return localVarFp.getJob(groupName, jobName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs(groupName: string, options?: any): AxiosPromise<Array<GetHttpJobResponse>> {
            return localVarFp.getJobs(groupName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HttpSchedulerControllerApi - object-oriented interface
 * @export
 * @class HttpSchedulerControllerApi
 * @extends {BaseAPI}
 */
export class HttpSchedulerControllerApi extends BaseAPI {
    /**
     * 
     * @param {PostHttpJobRequest} postHttpJobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpSchedulerControllerApi
     */
    public addJob(postHttpJobRequest: PostHttpJobRequest, options?: AxiosRequestConfig) {
        return HttpSchedulerControllerApiFp(this.configuration).addJob(postHttpJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupName 
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpSchedulerControllerApi
     */
    public deleteJob(groupName: string, jobName: string, options?: AxiosRequestConfig) {
        return HttpSchedulerControllerApiFp(this.configuration).deleteJob(groupName, jobName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpSchedulerControllerApi
     */
    public getGroups(options?: AxiosRequestConfig) {
        return HttpSchedulerControllerApiFp(this.configuration).getGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupName 
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpSchedulerControllerApi
     */
    public getJob(groupName: string, jobName: string, options?: AxiosRequestConfig) {
        return HttpSchedulerControllerApiFp(this.configuration).getJob(groupName, jobName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HttpSchedulerControllerApi
     */
    public getJobs(groupName: string, options?: AxiosRequestConfig) {
        return HttpSchedulerControllerApiFp(this.configuration).getJobs(groupName, options).then((request) => request(this.axios, this.basePath));
    }
}


